Ext.data.JsonP.touch_charts_interactions({
  "guide": "<h1>Touch Charts: Interactions</h1>\n\n<hr />\n\n<p>This guide introduces the advanced interaction features in Sencha Touch Charts. By taking advantage\nof these features, you can create highly interactive charts that allow your users to visualize and\neasily navigate complex data sets.</p>\n\n<h2>Introduction</h2>\n\n<p>Deploying web-based charts on mobile touch devices poses some unique problems over desktop environments:</p>\n\n<ul>\n<li>Small screen sizes limit the amount and complexity of data that you can display at once.</li>\n<li>Accurately selecting data points in order to get detailed information is difficult with touch input.</li>\n<li>Hardware limitations make redrawing chart data very expensive.</li>\n</ul>\n\n\n<p>While designing Sencha Touch Charts, we realized that these unique issues would make the sort of\ncharts commonly seen on the Web practically unusable on touch devices. It became clear that a\ngreat user experience would require a greatly expanded level of interactivity beyond anything seen\nin current charting products, that the interactions would have to be highly configurable,\nand that they would all have to be carefully designed to perform well on limited mobile hardware.</p>\n\n<p>The result is a comprehensive set of interactions included in Sencha Touch Charts 1.0, each one\ncompletely optional and highly configurable.</p>\n\n<hr />\n\n<h2>Adding Interactions to Your Chart</h2>\n\n<p>To add one or more interactions to your chart, simply set the <code>interactions</code> config of the chart to an\narray of interaction config objects. Each object must contain a <code>type</code> property matching one of the supported\ninteraction types, which are described below in the Supported Interaction Types section. Each object may also\ncontain additional configuration options appropriate for that particular interaction.</p>\n\n<p>For example:</p>\n\n<pre><code>var myChart = new Ext.chart.Chart({\n    store: myStore,\n    series: [{\n        type: 'column',\n        xField: 'month',\n        yField: ['visitors', 'pageviews']\n    }],\n    legend: {\n        position: 'left'\n    },\n    interactions: [\n        {\n            type: 'panzoom',\n            axes: ['bottom']\n        },\n        {\n            type: 'togglestacked',\n            gesture: 'taphold'\n        },\n        {\n            type: 'reset'\n        }\n    ]\n});\n</code></pre>\n\n<p>This column chart will be configured with three interactions: <code>panzoom</code> to allow zooming and panning along\nthe bottom axis, <code>togglestacked</code> to switch between stacked and grouped columns on taphold, and <code>reset</code> to let the user\nreset everything back to its default state.</p>\n\n<p>When adding an interaction with no additional configuration beyond its <code>type</code>, you can opt to specify that\ntype as a simple String value rather than in an Object. So the above example could alternatively be written as:</p>\n\n<pre><code>var myChart = new Ext.chart.Chart({\n    ...\n    interactions: [\n        {\n            type: 'panzoom',\n            axes: ['bottom']\n        },\n        {\n            type: 'togglestacked',\n            gesture: 'taphold'\n        },\n        'reset'  // no custom config, just give the type\n    ]\n});\n</code></pre>\n\n<h3>Gestures</h3>\n\n<p>All of the supported interactions are bound by default to gestures that make sense in most situations,\nhowever it is possible that you will want to change which gestures trigger which interactions on a case-by-case\nbasis. This is particularly likely when combining interactions whose default gestures collide with one another,\nsuch as the <code>itemhighlight</code> and <code>iteminfo</code> interactions which are both bound to a <code>tap</code> gesture by default.</p>\n\n<p>To allow customization of the gestures, each interaction exposes one or more gesture config properties. For simple\ninteractions with a single gesture, such as <code>reset</code> or <code>iteminfo</code>, use the <code>gesture</code> config:</p>\n\n<pre><code>interactions: [{\n    type: 'iteminfo',\n    gesture: 'taphold' //changed to use taphold instead of the default tap gesture\n}]\n</code></pre>\n\n<p>More complex interactions which use more than a single gesture expose multiple <code>fooGesture</code> configs for\ncustomizing each. See the API documentation for each interaction class to see which gesture properties it supports.</p>\n\n<hr />\n\n<h2>Supported Interaction Types</h2>\n\n<p>This section describes all of the supported interactions included with Touch Charts 1.0.</p>\n\n<h3>Reset</h3>\n\n<p>The <code>reset</code> interaction allows the end user to reset all other interactions back to their original untouched\nstate. It is bound to <code>doubletap</code> by default but that can be customized with the <code>gesture</code> config. An optional\nconfirmation dialog can be presented to the user before resetting if the <code>confirm</code> config is set to true.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'reset',\n    gesture: 'taphold',\n    confirm: true\n}]\n</code></pre>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.Reset\" rel=\"Ext.chart.interactions.Reset\" class=\"docClass\">Ext.chart.interactions.Reset</a> class; see that class's API documentation for\ndetailed configuration options.</p>\n\n<h3>Item Highlighting</h3>\n\n<p>The <code>itemhighlight</code> interaction allows the user to highlight individual data point items on the chart. It is\nbound to <code>tap</code> by default but that can be customized with the <code>gesture</code> config.</p>\n\n<p>The exact presentation of the highlighting effect varies by series type; for instance bar series items highlight\nby gaining a border and lightening in color, while pie series items highlight by sliding out. The highlight\neffects can also be customized via the <code>highlight</code> config property on each series.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'itemhighlight',\n    gesture: 'tap'\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/itemhighlight.png\" alt=\"Item Highlight\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.ItemHighlight\" rel=\"Ext.chart.interactions.ItemHighlight\" class=\"docClass\">Ext.chart.interactions.ItemHighlight</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Item Info</h3>\n\n<p>The <code>iteminfo</code> interaction allows the user to select an individual data point item on the chart and be given\ndetailed information about that item in a popup panel. It is bound to <code>tap</code> by default but that can be\ncustomized with the <code>gesture</code> config.</p>\n\n<p>The popup panel that gets displayed to the user does not have any default content, as that content is highly\ndependent on the particular data model and chart configuration being used. You must therefore implement a\nhandler for the interaction's <code>show</code> event to populate the panel. The handler will be passed a reference to\nthe interaction instance, the item selected by the user, and the panel instance.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'iteminfo',\n    gesture: 'taphold',\n    listeners: {\n        show: function(interaction, item, panel) {\n            var record = item.storeItem;\n            panel.update(\n                '&lt;b&gt;Traffic in ' + item.get('month') + ':&lt;/b&gt;' +\n                '&lt;ul&gt;' +\n                    '&lt;li&gt;Visitors: ' + item.get('visitors') + '&lt;/li&gt;' +\n                    '&lt;li&gt;Page Views: ' + item.get('pageviews') + '&lt;/li&gt;' +\n                '&lt;/ul&gt;'\n            );\n        }\n    }\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/iteminfo.png\" alt=\"Item Info\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.ItemInfo\" rel=\"Ext.chart.interactions.ItemInfo\" class=\"docClass\">Ext.chart.interactions.ItemInfo</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Item Comparison</h3>\n\n<p>The <code>itemcompare</code> interaction is similar to <code>iteminfo</code>, but allows the user to select two data point items\ninstead of just one and be given detailed information about the two items in relation to each other. An arrow\nwill be displayed connecting the two items being compared. Selection of each item is bound to <code>tap</code> by default\nbut that can be customized with the <code>gesture</code> config.</p>\n\n<p>By default only the connecting arrow will be displayed when two data point items are selected. You will\nlikely want to implement a custom handler for the <code>show</code> event to present the user with detailed info about\nthe trend between items. The handler function will be passed a reference to the interaction instance, from\nwhich you can retrieve the <code>item1</code> and <code>item2</code> properties.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'itemcompare',\n    listeners: {\n        show: function(interaction) {\n            var val1 = interaction.item1.value,\n                val2 = interaction.item2.value;\n            Ext.Msg.alert(\n                'Trend',\n                'Trend from ' + val1[0] + ' to ' + val2[0] + ': ' +\n                    Math.round((val2[1] - val1[1]) / val1[1] * 100) + '%',\n                interaction.reset,\n                interaction\n            );\n        }\n    }\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/itemcompare.png\" alt=\"Item Comparison\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.ItemCompare\" rel=\"Ext.chart.interactions.ItemCompare\" class=\"docClass\">Ext.chart.interactions.ItemCompare</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Axis Pan/Zoom Navigation</h3>\n\n<p>The <code>panzoom</code> interaction allows the user to navigate one or more axes in a cartesian chart by zooming in/out\nand panning around. This is particularly useful for series with large numbers of data points; zooming in lets\nthe user see details and more easily interact with individual data points.</p>\n\n<p>On devices which support multi-touch events, a two-touch pinch gesture performs a zoom and a single-touch drag\nperforms a pan. In non-multi-touch environments a single-touch drag is used to perform both zoom and pan; a\nsmall toggle button will be added to the edge of the chart which allows the user to switch between zooming and\npanning modes.</p>\n\n<p>This interaction must be bound to one or more axes; parameters for the pan/zoom can be configured individually\nper axis. For details see the API docs for the <code>axes</code> config property.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'panzoom',\n    axes: {\n        bottom: {\n            maxZoom: 4\n        }\n    }\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/panzoom-1.png\" alt=\"Normal\" /> <img src=\"guides/touch_charts_interactions/panzoom-2.png\" alt=\"Zoomed\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.PanZoom\" rel=\"Ext.chart.interactions.PanZoom\" class=\"docClass\">Ext.chart.interactions.PanZoom</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Pie/Radar Rotation</h3>\n\n<p>The <code>rotate</code> interaction allows the user to rotate a pie or radar chart. By default rotation is performed via\nthe <code>drag</code> gesture; this can be changed to <code>pinch</code> to require a two-finger pinch-and-twist gesture, however\nbe aware that not all touch devices support multiple-touch events.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'rotate'\n}]\n</code></pre>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.Rotate\" rel=\"Ext.chart.interactions.Rotate\" class=\"docClass\">Ext.chart.interactions.Rotate</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Pie Grouping</h3>\n\n<p>The <code>piegrouping</code> interaction allows the user to select multiple consecutive slices in a pie series and be\nshown detailed information about the selected group of items. Selection is begun by tapping a single slice\n(the exact gesture can be changed via the <code>gesture</code> config) which displays a selection overlay, and then the\nuser can drag the handles on either edge of the overlay to extend the selection to other slices.</p>\n\n<p>By default this interaction does not do anything when the selection is modified; instead it fires a\n<code>selectionchange</code> event for which you can add a listener that displays detailed information about the\nselection to the user.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'piegrouping',\n    listeners: {\n        selectionchange: function(interaction, selectedItems) {\n            var sum = 0,\n                i = selectedItems.length;\n            if (i) {\n                while(i--) {\n                    sum += selectedItems[i].storeItem.get('visitors');\n                }\n                chartPanel.descriptionPanel.setTitle('Total visitors: ' + sum);\n                chartPanel.headerPanel.setActiveItem(1, {type: 'slide', direction: 'left'});\n            }\n            else {\n                chartPanel.headerPanel.setActiveItem(0, {type: 'slide', direction: 'right'});\n            }\n        }\n    }\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/piegrouping.png\" alt=\"Pie Grouping\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.PieGrouping\" rel=\"Ext.chart.interactions.PieGrouping\" class=\"docClass\">Ext.chart.interactions.PieGrouping</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<h3>Toggle Stacked Bar/Column</h3>\n\n<p>The <code>togglestacked</code> interaction applies only to Bar or Column series which have multiple <code>yField</code> values.\nNormally these series display the yFields as multiple bars grouped together side-by-side, but they can also\nbe configured as <code>stacked</code> which displays them stacked on top of one another. Both visualizations have their\nown advantage for the user: the normal grouped orientation makes it easy to see exact values and compare them\nrelative to one another, but the stacked orientation makes it easy to see a total sum. By attaching the\n<code>togglestacked</code> interaction, the user is able to switch between these two states on the fly.</p>\n\n<p>By default this interaction is bound to a <code>swipe</code> event, but that can be customized with the <code>gesture</code> config.</p>\n\n<h4>Example:</h4>\n\n<pre><code>interactions: [{\n    type: 'togglestacked',\n    gesture: 'doubletap'\n}]\n</code></pre>\n\n<p><img src=\"guides/touch_charts_interactions/togglestacked-grouped.png\" alt=\"Grouped Bars\" /> <img src=\"guides/touch_charts_interactions/togglestacked-stacked.png\" alt=\"Stacked Bars\" /></p>\n\n<p>This interaction is implemented by the <a href=\"#/api/Ext.chart.interactions.ToggleStacked\" rel=\"Ext.chart.interactions.ToggleStacked\" class=\"docClass\">Ext.chart.interactions.ToggleStacked</a> class; see that class's API\ndocumentation for detailed configuration options.</p>\n\n<hr />\n\n<h2>Legend Interactions</h2>\n\n<p>While not technically \"interactions\" in the API sense, the chart legend also exposes some useful ways for\nthe user to interact with the chart data. These are enabled automatically when a legend is configured for\nthe chart, and they do not need to be individually configured.</p>\n\n<h3>Hiding</h3>\n\n<p>The user is able to tap on any item in the legend to toggle it to and from hidden state. This is useful\nfor charts with many series, allowing the user to remove certain items that get in the way.</p>\n\n<p><img src=\"guides/touch_charts_interactions/legend-hiding-1.png\" alt=\"Before Hiding\" /> <img src=\"guides/touch_charts_interactions/legend-hiding-2.png\" alt=\"After Hiding\" /></p>\n\n<h3>Combination</h3>\n\n<p>For series that add multiple legend items, such as Bar/Column and Pie series, the user can tap-hold one\nof the legend items and drag-drop it on top of another item from the same series; this combines those\ntwo items so they will be displayed as a single item in the series. Double-tapping a combined item\nsplits it back into its original constituent items.</p>\n\n<p><img src=\"guides/touch_charts_interactions/legend-combine-1.png\" alt=\"Before Combination\" /> <img src=\"guides/touch_charts_interactions/legend-combine-2.png\" alt=\"After Combination\" /></p>\n"
});